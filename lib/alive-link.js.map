{"version":3,"file":"alive-link.js","names":["_path","require","_url","_interopRequireDefault","_promises","_textlintRuleHelper","_nodeFetch","_minimatch","_pMemoize","_pQueue","obj","__esModule","default","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","res","call","TypeError","Number","DEFAULT_OPTIONS","language","checkRelative","baseURI","ignore","ignoreRedirects","ignoreStringLinks","preferGET","retry","concurrency","interval","intervalCap","userAgent","maxRetryDelay","maxRetryAfterDelay","timeout","URI_REGEXP","STATUS_CODE","NOT_ALLOWED","REDIRECT","getURLOrigin","urlString","URL","parse","protocol","hostname","concat","port","isHttp","uri","isRelative","host","isLocal","isAbsolute","isRedirect","code","includes","isRegExp","reg","prototype","toString","isIgnored","ignoreFuncs","some","ignoreFunc","checkProtocol","test","waitTimeMs","ms","setTimeout","createFetchWithRuleDefaults","ruleOptions","fetchOptions","fetch","compress","headers","Accept","Host","createCheckAliveURL","fetchWithDefaults","_isAliveURI","method","maxRetryCount","currentRetryCount","opts","redirect","status","redirectedUrl","get","ok","redirected","redirectTo","message","statusText","finalRes","hash","url","delayMs","retryAfter","retryAfterMs","maxRetryAfterDelayMs","Math","min","retryWaitTimeMs","maxRetryDelayMs","isAliveURI","ex","_x","isAliveLocalFile","_x2","_isAliveLocalFile","filePath","fs","access","replace","MESSAGE_CODE","RELATIVE_URI","DEAD_URI","REDIRECT_URI","MESSAGE","en","zh","DEFAULT_MESSAGE","getLintMessage","_ref","data","entries","reduce","result","_ref2","reporter","context","options","Syntax","getSource","report","RuleError","fixer","getFilePath","locator","helper","RuleHelper","map","origin","pattern","lastIndex","minimatch","memorizedIsAliveURI","pMemoize","maxAge","lint","_ref4","_ref3","node","index","URIRange","newURI","base","lintMessage","padding","range","fix","replaceTextRange","_x3","_x4","URIs","Str","isChildNode","BlockQuote","Link","Image","text","matches","matchAll","Array","from","match","raw","indexOf","Definition","indexOfUrl","DocumentExit","queue","PQueue","linkTasks","item","addAll","_default","linter","exports"],"sources":["../src/alive-link.js"],"sourcesContent":["import { isAbsolute } from 'path'\nimport URL from 'url'\nimport fs from 'fs/promises'\n\nimport { RuleHelper } from 'textlint-rule-helper'\nimport fetch from 'node-fetch'\nimport minimatch from 'minimatch'\nimport pMemoize from 'p-memoize'\nimport PQueue from 'p-queue'\n\nconst DEFAULT_OPTIONS = {\n  language: 'en', // {string} 'en': output info in English, set to 'zh' if you want Chinese\n  checkRelative: true, // {boolean} `false` disables the checks for relative URIs.\n  baseURI: null, // {string|function} a base URI to resolve relative URIs. If baseURI is a function, baseURI(uri) will be the URL to be checked, Function is only supported by .textlintrc.js.\n  ignore: [], // {string|regExp|function[]} URIs to be skipped from availability checks. RegExp and Function are only supported by .textlintrc.js.\n  ignoreRedirects: false, // {boolean} `false` ignores redirect status codes.\n  ignoreStringLinks: false, // {boolean} `false` URI matching in plain text.\n  preferGET: [], // {string[]} origins to prefer GET over HEAD.\n  retry: 3, // {number} Max retry count\n  concurrency: 8, // {number} Concurrency count of linting link [Experimental]\n  interval: 500, // {number} The length of time in milliseconds before the interval count resets. Must be finite. [Experimental]\n  intervalCap: 8, // {number} The max number of runs in the given interval of time. [Experimental]\n  userAgent: 'textlint-rule-alive-link/0.1', // {string} a UserAgent,\n  maxRetryDelay: 10, // {number} The max of waiting seconds for retry. It is related to `retry` option. It does affect to `Retry-After` header.\n  maxRetryAfterDelay: 10, // {number} The max of waiting seconds for `Retry-After` header.\n  timeout: 20, // {number} Request timeout (s), default is 20s.\n}\n\nconst URI_REGEXP = /(?:https?:)?\\/\\/(?:www\\.)?[-a-z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-\\p{L}0-9()@:%_+.~#?&/=]*)/gu\n\nconst STATUS_CODE = {\n  NOT_ALLOWED: 405,\n  REDIRECT: [301, 302, 303, 307, 308],\n}\n\n/**\n * Return URL origin string from `urlString`.\n * If origin is not found, return null\n * @param {string} urlString\n * @returns {string | null}\n * @see https://url.spec.whatwg.org/#origin\n */\nfunction getURLOrigin(urlString) {\n  if (!urlString) {\n    return null\n  }\n  const obj = URL.parse(urlString)\n  if (!obj.protocol && !obj.hostname) {\n    return null\n  }\n  return `${obj.protocol}//${obj.hostname}${obj.port ? `:${obj.port}` : ''}`\n}\n\n/**\n * Returns `true` if a given URI is https? url.\n * @param {string} uri\n * @return {boolean}\n */\nfunction isHttp(uri) {\n  const { protocol } = URL.parse(uri)\n  return protocol === 'http:' || protocol === 'https:'\n}\n\n/**\n * Returns `true` if a given URI is relative.\n * @param {string} uri\n * @return {boolean}\n * @see https://github.com/panosoft/is-local-path\n */\nfunction isRelative(uri) {\n  const { host } = URL.parse(uri)\n  return host === null || host === ''\n}\n\n/**\n * Returns if a given URI indicates a local file.\n * @param {string} uri\n * @return {boolean}\n * @see https://nodejs.org/api/path.html#path_path_isabsolute_path\n */\nfunction isLocal(uri) {\n  if (isAbsolute(uri)) {\n    return true\n  }\n  return isRelative(uri)\n}\n\n/**\n * Return `true` if the `code` is redirect status code.\n * @see https://fetch.spec.whatwg.org/#redirect-status\n * @param {number} code\n * @returns {boolean}\n */\nfunction isRedirect(code) {\n  return STATUS_CODE.REDIRECT.includes(code)\n}\n\n/**\n * Return `true` if reg is a regExpression\n * @param reg\n * @return {boolean}\n */\nfunction isRegExp(reg) {\n  return Object.prototype.toString.call(reg) === '[object RegExp]'\n}\n\nfunction isIgnored(uri, ignoreFuncs) {\n  return ignoreFuncs.some(ignoreFunc => ignoreFunc(uri))\n}\n\n/**\n * Check if URI have protocol\n * @description Some URIs' protocol in HTML is removed. Like: //google.com instead of https://google.com\n * @param {string} uri\n * @return {boolean}\n */\nfunction checkProtocol(uri) {\n  return /^\\/\\//.test(uri)\n}\n\n/**\n * wait for ms and resolve the promise\n * @param ms\n * @returns {Promise<any>}\n */\nfunction waitTimeMs(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nconst createFetchWithRuleDefaults = (ruleOptions) => {\n  return (uri, fetchOptions) => {\n    const { host } = URL.parse(uri)\n    return fetch(uri, {\n      ...fetchOptions,\n      timeout: ruleOptions.timeout * 1000,\n      // Disable gzip compression in Node.js\n      // to avoid the zlib's \"unexpected end of file\" error\n      // https://github.com/request/request/issues/2045\n      compress: false,\n      // Some website require UserAgent and Accept header\n      // to avoid ECONNRESET error\n      headers: {\n        'User-Agent': ruleOptions.userAgent,\n        Accept: '*/*',\n        // avoid assign null to Host\n        ...(host\n          ? {\n            // Same host for target url\n            Host: host,\n          }\n          : {}),\n      },\n    })\n  }\n}\n\n/**\n * Create isAliveURI function with ruleOptions\n * @param {object} ruleOptions\n * @returns {function}\n */\nconst createCheckAliveURL = (ruleOptions) => {\n  // Create fetch function for this rule\n  const fetchWithDefaults = createFetchWithRuleDefaults(ruleOptions)\n  /**\n   * Checks if a given URI is alive or not.\n   *\n   * Normally, this method following strategiry about retry\n   *\n   * 1. Head\n   * 2. Get\n   * 3. Get\n   *\n   * @param {string} uri\n   * @param {string} method\n   * @param {number} maxRetryCount\n   * @param {number} currentRetryCount\n   * @return {{ ok: boolean, redirect?: string, message: string }}\n   */\n  return async function isAliveURI(\n    uri,\n    method = 'HEAD',\n    maxRetryCount = 3,\n    currentRetryCount = 0,\n  ) {\n    const opts = {\n      method,\n      // Use `manual` redirect behaviour to get HTTP redirect status code\n      // and see what kind of redirect is occurring\n      redirect: 'manual',\n    }\n    try {\n      const res = await fetchWithDefaults(uri, opts)\n      // Redirected\n      if (isRedirect(res.status)) {\n        const redirectedUrl = res.headers.get('Location')\n        // Status code is 301 or 302, but Location header is not set\n        if (redirectedUrl === null) {\n          return {\n            ok: false,\n            redirected: true,\n            redirectTo: null,\n            message: `${res.status} ${res.statusText}`,\n          }\n        }\n        const finalRes = await fetchWithDefaults(redirectedUrl, { ...opts, redirect: 'follow' })\n        const { hash } = URL.parse(uri)\n        return {\n          ok: finalRes.ok,\n          redirected: true,\n          redirectTo: hash !== null ? `${finalRes.url}${hash}` : finalRes.url,\n          message: `${res.status} ${res.statusText}`,\n        }\n      }\n\n      // Return directly if true\n      if (res.ok) {\n        return {\n          ok: true,\n          message: 'OK',\n        }\n      }\n\n      // Retry available\n      if (currentRetryCount < maxRetryCount) {\n        // If current method is not allowed, switch to the allowed method\n        if (res.status === STATUS_CODE.NOT_ALLOWED) {\n          method = res.headers.get('Allow') || 'GET'\n        } else {\n          // Retry using 'GET' method if it is not ok when use 'HEAD' method\n          method = 'GET'\n        }\n\n        let delayMs = 0\n        // Try to fetch again if not reach max retry count\n        const retryAfter = res.headers.get('Retry-After')\n        // The response `Retry-After` header has a higher priority\n        // e.g. `Retry-After: 60` and `maxRetryAfterDelay: 90`, wait 60 seconds\n        if (retryAfter) {\n          const retryAfterMs = Number(retryAfter) * 1000\n          const maxRetryAfterDelayMs = ruleOptions.maxRetryAfterDelay * 1000\n          delayMs = Math.min(retryAfterMs, maxRetryAfterDelayMs)\n        } else {\n          // exponential retry: 0ms -> 100ms -> 200ms -> 400ms -> 800ms ...\n          const retryWaitTimeMs = currentRetryCount ** 2 * 100\n          const maxRetryDelayMs = ruleOptions.maxRetryDelay * 1000\n\n          delayMs = Math.min(retryWaitTimeMs, maxRetryDelayMs)\n        }\n        if (delayMs > 0) {\n          // Retry delay\n          await waitTimeMs(delayMs)\n        }\n        return isAliveURI(uri, method, maxRetryCount, currentRetryCount + 1)\n      }\n\n      return {\n        ok: false,\n        message: `${res.status} ${res.statusText}`,\n      }\n    } catch (ex) {\n      // Retry with `GET` method if the request failed\n      // as some servers don't accept `HEAD` requests but are OK with `GET` requests.\n      if (method === 'HEAD' && currentRetryCount < maxRetryCount) {\n        return isAliveURI(uri, 'GET', maxRetryCount, currentRetryCount + 1)\n      }\n\n      return {\n        ok: false,\n        message: ex.message,\n      }\n    }\n  }\n}\n\n/**\n * Check if a given file exists\n */\nasync function isAliveLocalFile(filePath) {\n  try {\n    // Remove query string and hash string\n    await fs.access(filePath.replace(/[?#].*?$/, ''))\n    return {\n      ok: true,\n      message: 'OK',\n    }\n  } catch (ex) {\n    return {\n      ok: false,\n      message: ex.message,\n    }\n  }\n}\n\nconst MESSAGE_CODE = {\n  RELATIVE_URI: 1,\n  DEAD_URI: 2,\n  REDIRECT_URI: 3,\n}\n\nconst MESSAGE = {\n  [MESSAGE_CODE.RELATIVE_URI]: {\n    en: 'Unable to resolve the relative URI. Please check if the options.baseURI is correctly specified.',\n    zh: '无法解析相对链接。请检查是否正确配置 options.baseURI',\n  },\n  [MESSAGE_CODE.DEAD_URI]: {\n    en: '${uri} is dead. (${message})',\n    zh: '${uri} 是死链接。（${message}）',\n  },\n  [MESSAGE_CODE.REDIRECT_URI]: {\n    en: '${uri} is redirected to ${redirectTo}. (${message})',\n    zh: '${uri} 重定向到了 ${redirectTo}。（${message}）',\n  },\n}\n\nconst DEFAULT_MESSAGE = {\n  en: 'Unknown error',\n  zh: '未知错误',\n}\n\n/**\n * 基于语种等信息取出 lint message\n * @param {number} code\n * @param {object|null} data\n * @param {string} language\n * @return {string}\n */\nfunction getLintMessage({ code, data, language }) {\n  let message = MESSAGE[code] || DEFAULT_MESSAGE\n  if (!data) {\n    return message[language]\n  }\n  return Object.entries(data).reduce((result, [key, value]) => {\n    return result.replace(`\\${${key}}`, value)\n  }, message[language])\n}\n\nconst reporter = (context, options) => {\n  const { Syntax, getSource, report, RuleError, fixer, getFilePath, locator } = context\n  const helper = new RuleHelper(context)\n  const ruleOptions = { ...DEFAULT_OPTIONS, ...options }\n  // format preferGET list to ensure URI string is origin\n  ruleOptions.preferGET = ruleOptions.preferGET.map((origin) => getURLOrigin(origin))\n  // transform ignore patterns to function\n  ruleOptions.ignoreFuncs = (ruleOptions.ignore || []).map(pattern => {\n    if (typeof pattern === 'function') {\n      return pattern\n    } else if (isRegExp(pattern)) {\n      return uri => {\n        // reset reg index on every test to avoid global pattern\n        pattern.lastIndex = 0\n        return pattern.test(uri)\n      }\n    }\n    return uri => minimatch(uri, pattern)\n  })\n  const isAliveURI = createCheckAliveURL(ruleOptions)\n  // 30sec memorized\n  const memorizedIsAliveURI = pMemoize(isAliveURI, {\n    maxAge: 30 * 1000,\n  })\n\n  /**\n   * Checks a given URI's availability and report if it is dead.\n   * @param {TextLintNode} node TextLintNode the URI belongs to.\n   * @param {string} uri a URI string to be linted.\n   * @param {number} index column number the URI is located at.\n   * @param {number} maxRetryCount retry count of linting\n   */\n  const lint = async ({ node, uri, index }, maxRetryCount) => {\n    if (isIgnored(uri, ruleOptions.ignoreFuncs)) {\n      return\n    }\n    const URIRange = [index, index + uri.length]\n    let newURI = uri\n    let result = null\n\n    if (isRelative(uri)) {\n      // Check if there is just no protocol ahead\n      if (checkProtocol(uri)) {\n        newURI = `https:${uri}`\n      } else {\n        if (!ruleOptions.checkRelative) {\n          return\n        }\n\n        if (typeof ruleOptions.baseURI === 'function') {\n          newURI = ruleOptions.baseURI(uri)\n        } else {\n          // Input source may be a file, use the filePath as baseURI if ruleOptions.baseURI is not provided\n          const base = ruleOptions.baseURI || getFilePath()\n          if (!base) {\n            const lintMessage = getLintMessage({ code: MESSAGE_CODE.RELATIVE_URI, language: ruleOptions.language })\n            report(node, new RuleError(lintMessage, { padding: locator.range(URIRange) }))\n            return\n          }\n\n          newURI = URL.resolve(base, uri)\n        }\n      }\n    }\n\n    if (isLocal(newURI)) {\n      result = await isAliveLocalFile(newURI)\n    } else {\n      // Ignore non http external link\n      if (!isHttp(newURI)) {\n        return\n      }\n\n      // Determine request method\n      const method = ruleOptions.preferGET.includes(getURLOrigin(newURI)) ? 'GET' : 'HEAD'\n      result = await memorizedIsAliveURI(newURI, method, maxRetryCount)\n    }\n\n    const { ok, redirected, redirectTo, message } = result\n    // When ignoreRedirects is true, redirected should be ignored\n    if (redirected && ruleOptions.ignoreRedirects) {\n      return\n    }\n    if (!ok) {\n      const lintMessage = getLintMessage({ code: MESSAGE_CODE.DEAD_URI, data: { uri, message }, language: ruleOptions.language })\n      report(node, new RuleError(lintMessage, { padding: locator.range(URIRange) }))\n    } else if (redirected) {\n      const lintMessage = getLintMessage({ code: MESSAGE_CODE.REDIRECT_URI, data: { uri, redirectTo, message }, language: ruleOptions.language })\n      // Replace the old URI with redirected URI\n      const fix = redirectTo ? fixer.replaceTextRange(URIRange, redirectTo) : undefined\n      report(node, new RuleError(lintMessage, { fix, padding: locator.range(URIRange) }))\n    }\n  }\n\n  /**\n   * URIs to be checked.\n   */\n  const URIs = []\n\n  return {\n    [Syntax.Str](node) {\n      if (ruleOptions.ignoreStringLinks) {\n        return\n      }\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return\n      }\n\n      // prevent double checks\n      if (helper.isChildNode(node, [Syntax.Link])) {\n        return\n      }\n\n      // prevent double checks\n      if (helper.isChildNode(node, [Syntax.Image])) {\n        return\n      }\n\n      const text = getSource(node)\n\n      // Use `String#replace` instead of `RegExp#exec` to allow us\n      // perform RegExp matches in an iterate and immutable manner\n      const matches = text.matchAll(URI_REGEXP)\n      Array.from(matches).forEach((match) => {\n        const url = match[0]\n        if (url && match.input !== undefined && match.index !== undefined) {\n          URIs.push({ node, uri: url, index: match.index })\n        }\n      })\n    },\n\n    [Syntax.Link](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return\n      }\n\n      // Ignore HTML5 place holder link.\n      // Ex) <a>Placeholder Link</a>\n      if (typeof node.url === 'undefined') {\n        return\n      }\n\n      // [text](http://example.com)\n      //       ^\n      const index = node.raw.indexOf(node.url) || 0\n\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      })\n    },\n\n    [Syntax.Image](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return\n      }\n\n      // ![img](http://example.com)\n      //       ^\n      const index = node.raw.indexOf(node.url) || 0\n\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      })\n    },\n\n    // Reference links is markdown specific\n    Definition: function (node) {\n      if (!node.url) {\n        return\n      }\n\n      // Some link text[1]\n      //\n      // [1]: https://foo.bar\n      //      ^\n      const indexOfUrl = node.raw.indexOf(node.url)\n      const index = indexOfUrl !== -1 ? indexOfUrl : 0\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      })\n    },\n\n    [Syntax.DocumentExit]() {\n      const queue = new PQueue({\n        concurrency: ruleOptions.concurrency,\n        intervalCap: ruleOptions.intervalCap,\n        interval: ruleOptions.interval,\n      })\n      const linkTasks = URIs.map((item) => () => lint(item, ruleOptions.retry))\n      return queue.addAll(linkTasks)\n    },\n  }\n}\nexport default {\n  linter: reporter,\n  fixer: reporter,\n}\n"],"mappings":"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"}