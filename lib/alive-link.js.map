{"version":3,"file":"alive-link.js","names":["_path","require","_url","_interopRequireDefault","_promises","_textlintRuleHelper","_nodeFetch","_minimatch","_pMemoize","_pQueue","obj","__esModule","default","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","res","call","TypeError","Number","DEFAULT_OPTIONS","checkRelative","baseURI","ignore","ignoreRedirects","ignoreStringLinks","preferGET","retry","concurrency","interval","intervalCap","userAgent","maxRetryDelay","maxRetryAfterDelay","URI_REGEXP","REDIRECT_STATUS_CODE","getURLOrigin","urlString","URL","parse","protocol","hostname","concat","port","isHttp","uri","isRelative","host","isLocal","isAbsolute","isRedirect","code","includes","isIgnored","some","pattern","minimatch","waitTimeMs","ms","setTimeout","createFetchWithRuleDefaults","ruleOptions","fetchOptions","fetch","compress","headers","Accept","Host","createCheckAliveURL","fetchWithDefaults","_isAliveURI","method","maxRetryCount","currentRetryCount","opts","redirect","status","redirectedUrl","get","ok","redirected","redirectTo","message","statusText","finalRes","hash","url","isAliveURI","retryAfter","retryAfterMs","maxRetryAfterDelayMs","retryWaitTimeMs","maxRetryDelayMs","ex","_x","isAliveLocalFile","_x2","_isAliveLocalFile","filePath","fs","access","replace","reporter","context","options","Syntax","getSource","report","RuleError","fixer","getFilePath","locator","helper","RuleHelper","map","origin","memorizedIsAliveURI","pMemoize","maxAge","lint","_ref2","_ref","node","index","URIRange","newURI","base","padding","range","isLocalURI","result","lintMessage","fix","replaceTextRange","_x3","_x4","URIs","Str","isChildNode","BlockQuote","Link","Image","text","matches","matchAll","Array","from","match","raw","indexOf","Definition","indexOfUrl","DocumentExit","queue","PQueue","linkTasks","item","addAll","_default","linter","exports"],"sources":["../src/alive-link.js"],"sourcesContent":["import { isAbsolute } from 'path'\nimport URL from 'url'\nimport fs from 'fs/promises'\n\nimport { RuleHelper } from 'textlint-rule-helper'\nimport fetch from 'node-fetch'\nimport minimatch from 'minimatch'\nimport pMemoize from 'p-memoize'\nimport PQueue from 'p-queue'\n\nconst DEFAULT_OPTIONS = {\n  checkRelative: true, // {boolean} `false` disables the checks for relative URIs.\n  baseURI: null, // {String|null} a base URI to resolve relative URIs.\n  ignore: [], // {Array<String>} URIs to be skipped from availability checks.\n  ignoreRedirects: false, // {boolean} `false` ignores redirect status codes.\n  ignoreStringLinks: false, // {boolean} `false` skip URI_REGEXP checking in string.\n  preferGET: [], // {Array<String>} origins to prefer GET over HEAD.\n  retry: 3, // {number} Max retry count\n  concurrency: 8, // {number} Concurrency count of linting link [Experimental]\n  interval: 500, // The length of time in milliseconds before the interval count resets. Must be finite. [Experimental]\n  intervalCap: 8, // The max number of runs in the given interval of time. [Experimental]\n  userAgent: 'textlint-rule-alive-link/0.1', // {String} a UserAgent,\n  maxRetryDelay: 10, // (number) The max of waiting seconds for retry. It is related to `retry` option. It does affect to `Retry-After` header.\n  maxRetryAfterDelay: 10, // (number) The max of waiting seconds for `Retry-After` header.\n}\n\nconst URI_REGEXP = /(?:https?:)?\\/\\/(?:www\\.)?[-a-z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-\\p{L}0-9()@:%_+.~#?&/=]*)/gu\n\nconst REDIRECT_STATUS_CODE = [301, 302, 303, 307, 308]\n\n/**\n * Return URL origin string from `urlString`.\n * If origin is not found, return null\n * @param {string} urlString\n * @returns {string | null}\n * @see https://url.spec.whatwg.org/#origin\n */\nfunction getURLOrigin(urlString) {\n  if (!urlString) {\n    return null\n  }\n  const obj = URL.parse(urlString)\n  if (!obj.protocol && !obj.hostname) {\n    return null\n  }\n  return `${obj.protocol}//${obj.hostname}${obj.port ? `:${obj.port}` : ''}`\n}\n\n/**\n * Returns `true` if a given URI is https? url.\n * @param {string} uri\n * @return {boolean}\n */\nfunction isHttp(uri) {\n  const { protocol } = URL.parse(uri)\n  return protocol === 'http:' || protocol === 'https:'\n}\n\n/**\n * Returns `true` if a given URI is relative.\n * @param {string} uri\n * @return {boolean}\n * @see https://github.com/panosoft/is-local-path\n */\nfunction isRelative(uri) {\n  const { host } = URL.parse(uri)\n  return host === null || host === ''\n}\n\n/**\n * Returns if a given URI indicates a local file.\n * @param {string} uri\n * @return {boolean}\n * @see https://nodejs.org/api/path.html#path_path_isabsolute_path\n */\nfunction isLocal(uri) {\n  if (isAbsolute(uri)) {\n    return true\n  }\n  return isRelative(uri)\n}\n\n/**\n * Return `true` if the `code` is redirect status code.\n * @see https://fetch.spec.whatwg.org/#redirect-status\n * @param {number} code\n * @returns {boolean}\n */\nfunction isRedirect(code) {\n  return REDIRECT_STATUS_CODE.includes(code)\n}\n\nfunction isIgnored(uri, ignore = []) {\n  return ignore.some((pattern) => minimatch(uri, pattern))\n}\n\n/**\n * wait for ms and resolve the promise\n * @param ms\n * @returns {Promise<any>}\n */\nfunction waitTimeMs(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nconst createFetchWithRuleDefaults = (ruleOptions) => {\n  return (uri, fetchOptions) => {\n    const { host } = URL.parse(uri)\n    return fetch(uri, {\n      ...fetchOptions,\n      // Disable gzip compression in Node.js\n      // to avoid the zlib's \"unexpected end of file\" error\n      // https://github.com/request/request/issues/2045\n      compress: false,\n      // Some website require UserAgent and Accept header\n      // to avoid ECONNRESET error\n      headers: {\n        'User-Agent': ruleOptions.userAgent,\n        Accept: '*/*',\n        // avoid assign null to Host\n        ...(host\n          ? {\n            // Same host for target url\n            Host: host,\n          }\n          : {}),\n      },\n    })\n  }\n}\n\n/**\n * Create isAliveURI function with ruleOptions\n * @param {object} ruleOptions\n * @returns {function}\n */\nconst createCheckAliveURL = (ruleOptions) => {\n  // Create fetch function for this rule\n  const fetchWithDefaults = createFetchWithRuleDefaults(ruleOptions)\n  /**\n   * Checks if a given URI is alive or not.\n   *\n   * Normally, this method following strategiry about retry\n   *\n   * 1. Head\n   * 2. Get\n   * 3. Get\n   *\n   * @param {string} uri\n   * @param {string} method\n   * @param {number} maxRetryCount\n   * @param {number} currentRetryCount\n   * @return {{ ok: boolean, redirect?: string, message: string }}\n   */\n  return async function isAliveURI(\n    uri,\n    method = 'HEAD',\n    maxRetryCount = 3,\n    currentRetryCount = 0,\n  ) {\n    const opts = {\n      method,\n      // Use `manual` redirect behaviour to get HTTP redirect status code\n      // and see what kind of redirect is occurring\n      redirect: 'manual',\n    }\n    try {\n      const res = await fetchWithDefaults(uri, opts)\n      // Redirected\n      if (isRedirect(res.status)) {\n        const redirectedUrl = res.headers.get('Location')\n        // Status code is 301 or 302, but Location header is not set\n        if (redirectedUrl === null) {\n          return {\n            ok: false,\n            redirected: true,\n            redirectTo: null,\n            message: `${res.status} ${res.statusText}`,\n          }\n        }\n        const finalRes = await fetchWithDefaults(redirectedUrl, { ...opts, redirect: 'follow' })\n        const { hash } = URL.parse(uri)\n        return {\n          ok: finalRes.ok,\n          redirected: true,\n          redirectTo: hash !== null ? `${finalRes.url}${hash}` : finalRes.url,\n          message: `${res.status} ${res.statusText}`,\n        }\n      }\n\n      // Return directly if true\n      if (res.ok) {\n        return {\n          ok: true,\n          message: 'OK',\n        }\n      }\n\n      // Retry available\n      if (currentRetryCount < maxRetryCount) {\n        // Retry using 'GET' method if it is not ok when use 'HEAD' method\n        if (method === 'HEAD') {\n          return isAliveURI(uri, 'GET', maxRetryCount, currentRetryCount + 1)\n        }\n\n        // Try to fetch again if not reach max retry count\n        const retryAfter = res.headers.get('Retry-After')\n        // The response `Retry-After` header has a higher priority\n        // e.g. `Retry-After: 60` and `maxRetryAfterDelay: 90`, wait 60 seconds\n        if (retryAfter) {\n          const retryAfterMs = Number(retryAfter) * 1000\n          const maxRetryAfterDelayMs = ruleOptions.maxRetryAfterDelay * 1000\n          if (retryAfterMs <= maxRetryAfterDelayMs) {\n            await waitTimeMs(retryAfterMs)\n          }\n        } else {\n          // exponential retry: 0ms -> 100ms -> 200ms -> 400ms -> 800ms ...\n          const retryWaitTimeMs = currentRetryCount ** 2 * 100\n          const maxRetryDelayMs = ruleOptions.maxRetryDelay * 1000\n          if (retryWaitTimeMs <= maxRetryDelayMs) {\n            await waitTimeMs(retryWaitTimeMs)\n          }\n        }\n\n        return isAliveURI(uri, 'GET', maxRetryCount, currentRetryCount + 1)\n      }\n\n      return {\n        ok: false,\n        message: `${res.status} ${res.statusText}`,\n      }\n    } catch (ex) {\n      // Retry with `GET` method if the request failed\n      // as some servers don't accept `HEAD` requests but are OK with `GET` requests.\n      if (method === 'HEAD' && currentRetryCount < maxRetryCount) {\n        return isAliveURI(uri, 'GET', maxRetryCount, currentRetryCount + 1)\n      }\n\n      return {\n        ok: false,\n        message: ex.message,\n      }\n    }\n  }\n}\n\n/**\n * Check if a given file exists\n */\nasync function isAliveLocalFile(filePath) {\n  try {\n    // Remove query string and hash string\n    await fs.access(filePath.replace(/[?#].*?$/, ''))\n    return {\n      ok: true,\n      message: 'OK',\n    }\n  } catch (ex) {\n    return {\n      ok: false,\n      message: ex.message,\n    }\n  }\n}\n\nconst reporter = (context, options) => {\n  const { Syntax, getSource, report, RuleError, fixer, getFilePath, locator } = context\n  const helper = new RuleHelper(context)\n  const ruleOptions = { ...DEFAULT_OPTIONS, ...options }\n  // format preferGET list to ensure URI string is origin\n  ruleOptions.preferGET = ruleOptions.preferGET.map((origin) => getURLOrigin(origin))\n  const isAliveURI = createCheckAliveURL(ruleOptions)\n  // 30sec memorized\n  const memorizedIsAliveURI = pMemoize(isAliveURI, {\n    maxAge: 30 * 1000,\n  })\n\n  /**\n   * Checks a given URI's availability and report if it is dead.\n   * @param {TextLintNode} node TextLintNode the URI belongs to.\n   * @param {string} uri a URI string to be linted.\n   * @param {number} index column number the URI is located at.\n   * @param {number} maxRetryCount retry count of linting\n   */\n  const lint = async ({ node, uri, index }, maxRetryCount) => {\n    if (isIgnored(uri, ruleOptions.ignore)) {\n      return\n    }\n    const URIRange = [index, index + uri.length]\n    let newURI = uri\n\n    if (isRelative(uri)) {\n      if (!ruleOptions.checkRelative) {\n        return\n      }\n\n      const filePath = getFilePath()\n      const base = ruleOptions.baseURI || filePath\n      if (!base) {\n        const message = 'Unable to resolve the relative URI. Please check if the options.baseURI is correctly specified.'\n\n        report(node, new RuleError(message, { padding: locator.range(URIRange) }))\n        return\n      }\n\n      newURI = URL.resolve(base, uri)\n    }\n\n    const isLocalURI = isLocal(newURI)\n\n    // Ignore non http external link\n    if (!isLocalURI && !isHttp(newURI)) {\n      return\n    }\n\n    // Determine request method\n    const method = ruleOptions.preferGET.includes(getURLOrigin(newURI)) ? 'GET' : 'HEAD'\n\n    const result = isLocalURI ? await isAliveLocalFile(newURI) : await memorizedIsAliveURI(newURI, method, maxRetryCount)\n\n    const { ok, redirected, redirectTo, message } = result\n    // When ignoreRedirects is true, redirected should be ignored\n    if (redirected && ruleOptions.ignoreRedirects) {\n      return\n    }\n    if (!ok) {\n      const lintMessage = `${uri} is dead. (${message})`\n      report(node, new RuleError(lintMessage, { padding: locator.range(URIRange) }))\n    } else if (redirected) {\n      const lintMessage = `${uri} is redirected to ${redirectTo}. (${message})`\n      // Replace the old URI with redirected URI\n      const fix = redirectTo ? fixer.replaceTextRange(URIRange, redirectTo) : undefined\n      report(node, new RuleError(lintMessage, { fix, padding: locator.range(URIRange) }))\n    }\n  }\n\n  /**\n   * URIs to be checked.\n   */\n  const URIs = []\n\n  return {\n    [Syntax.Str](node) {\n      if (ruleOptions.ignoreStringLinks) {\n        return\n      }\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return\n      }\n\n      // prevent double checks\n      if (helper.isChildNode(node, [Syntax.Link])) {\n        return\n      }\n\n      // prevent double checks\n      if (helper.isChildNode(node, [Syntax.Image])) {\n        return\n      }\n\n      const text = getSource(node)\n\n      // Use `String#replace` instead of `RegExp#exec` to allow us\n      // perform RegExp matches in an iterate and immutable manner\n      const matches = text.matchAll(URI_REGEXP)\n      Array.from(matches).forEach((match) => {\n        const url = match[0]\n        if (url && match.input !== undefined && match.index !== undefined) {\n          URIs.push({ node, uri: url, index: match.index })\n        }\n      })\n    },\n\n    [Syntax.Link](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return\n      }\n\n      // Ignore HTML5 place holder link.\n      // Ex) <a>Placeholder Link</a>\n      if (typeof node.url === 'undefined') {\n        return\n      }\n\n      // [text](http://example.com)\n      //       ^\n      const index = node.raw.indexOf(node.url) || 0\n\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      })\n    },\n\n    [Syntax.Image](node) {\n      if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n        return\n      }\n\n      // ![img](http://example.com)\n      //       ^\n      const index = node.raw.indexOf(node.url) || 0\n\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      })\n    },\n\n    // Reference links is markdown specific\n    Definition: function (node) {\n      if (!node.url) {\n        return\n      }\n\n      // Some link text[1]\n      //\n      // [1]: https://foo.bar\n      //      ^\n      const indexOfUrl = node.raw.indexOf(node.url)\n      const index = indexOfUrl !== -1 ? indexOfUrl : 0\n      URIs.push({\n        node,\n        uri: node.url,\n        index,\n      })\n    },\n\n    [Syntax.DocumentExit]() {\n      const queue = new PQueue({\n        concurrency: ruleOptions.concurrency,\n        intervalCap: ruleOptions.intervalCap,\n        interval: ruleOptions.interval,\n      })\n      const linkTasks = URIs.map((item) => () => lint(item, ruleOptions.retry))\n      return queue.addAll(linkTasks)\n    },\n  }\n}\nexport default {\n  linter: reporter,\n  fixer: reporter,\n}\n"],"mappings":"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"}